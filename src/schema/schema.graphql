type Query {
    users: ResultUsers
    login(email: String, password: String!): ResultLogin
    me: ResultUser
}

type Mutation {
    register(user: UserInput!): ResultUser
}

interface Result {
    status: Boolean!
    message: String!
}

type ResultUsers implements Result {
    status: Boolean!
    message: String!
    users: [User!]!
}

type ResultUser implements Result {
    status: Boolean!
    message: String!
    user: User
}

type ResultLogin implements Result {
    status: Boolean!
    message: String!
    token: String
}

type User {
    id: ID!
    name: String!
    lastName: String!
    email: String!
    password: String!
    registerDate: String!
    birthDay: String!
    role: Role!
}

input UserInput {
    id: ID
    name: String!
    lastName: String!
    email: String!
    password: String!
    registerDate: String
    birthDay: String!
    role: Role = CLIENT
}

enum Role {
    CLIENT
    ADMIN
}
